{
  "println": {
    "prefix": "puts",
    "body": [
      "puts!(\"{}\", ${1:ans});"
    ],
    "description": "Println shortcut"
  },
  "print": {
    "prefix": "put",
    "body": [
      "put!(\"{} \", ${1:ans});"
    ],
    "description": "Print shortcut"
  },
  "put macro": {
    "prefix": "macro_put",
    "body": [
      "macro_rules! put {",
      "  ($(\\$format:tt)*) => (write!(out,$(\\$format)*).unwrap());",
      "}"
    ],
    "description": "Put marco"
  },
  "dump": {
    "prefix": "dump",
    "body": [
      "println!(\"${1}={:?}\", ${1});"
    ],
    "description": "Println shortcut"
  },
  "dump2": {
    "prefix": "dump2",
    "body": [
      "println!(\"${1:x}={:?} ${2:y}={:?}\", ${1:x}, ${2:y});"
    ],
    "description": "Println shortcut"
  },
  "range for loop": {
    "prefix": "fi",
    "body": [
      "for ${1:i} in ${2:0}..${3:n} {",
      "",
      "}"
    ],
    "description": "For loop"
  },
  "double for loop": {
    "prefix": "fhw",
    "body": [
      "for ${1:i} in ${2:0}..${3:h} {",
      "    for ${4:j} in ${5:0}..${6:w} {",
      "        ",
      "    }",
      "}"
    ],
    "description": "Double for loop"
  },
  "max3": {
    "prefix": "max3",
    "body": [
      "max(${1:a}, max(${2:b}, ${3:c}));"
    ],
    "description": "max3"
  },
  "min3": {
    "prefix": "min3",
    "body": [
      "min(${1:a}, min(${2:b}, ${3:c}));"
    ],
    "description": "min3"
  },
  "max4": {
    "prefix": "max4",
    "body": [
      "max(${1:a}, max(max(${2:b}, ${3:c}), ${4:d}));"
    ],
    "description": "max4"
  },
  "min4": {
    "prefix": "min4",
    "body": [
      "min(${1:a}, min(min(${2:b}, ${3:c}), ${4:d}));"
    ],
    "description": "min4"
  },
  "const mod": {
    "prefix": "constmod",
    "body": [
      "const MOD: usize = 1e9 as usize + 7;"
    ],
    "description": "declare MOD const"
  },
  "with index": {
    "prefix": "with_index",
    "body": [
      "let mut ${1:xs} = xs.iter().enumerate().collect::<Vec<_>>();",
      "${1:xs}.sort_by_key(|&(_, v)| v);"
    ],
    "description": "map to list with index"
  },
  "input parsing macro": {
    "prefix": "input",
    "body": [
      "input!{",
      "  ${1:n}: usize,",
      "  ${2:a}: usize,",
      "  ${3:b}: usize,",
      "  ${4:c}: usize,",
      "}"
    ],
    "description": "input macro"
  },
  "arg": {
    "prefix": "arg",
    "body": [
      "${1:a}: usize"
    ],
    "description": "arg"
  },
  "arg2": {
    "prefix": "arg2",
    "body": [
      "${1:a}: ${3:usize}, ${2:b}: ${3:usize}"
    ],
    "description": "2 arguments"
  },
  "arg3": {
    "prefix": "arg3",
    "body": [
      "${1:a}: ${4:usize}, ${2:b}: ${4:usize}, ${3:c}: ${4:usize}"
    ],
    "description": "3 arguments"
  },
  "usize cast": {
    "prefix": "asu",
    "body": [
      "as usize"
    ],
    "description": "as usize"
  },
  "i64 cast": {
    "prefix": "asi",
    "body": [
      "as i64"
    ],
    "description": "as u64"
  },
  "integer": {
    "prefix": "integer",
    "body": [
      "let mut ${1:x} = ${2:0};"
    ],
    "description": "declare integer"
  },
  "Vec": {
    "prefix": "vec",
    "body": [
      "Vec<${1:usize}>"
    ],
    "description": "vector"
  },
  "Vec char": {
    "prefix": "vecc",
    "body": [
      "Vec<char>"
    ],
    "description": "vec char"
  },
  "2d Vector": {
    "prefix": "vec2",
    "body": [
      "Vec<Vec<${1:usize}>>"
    ],
    "description": "2-dimentional vector"
  },
  "3d Vector": {
    "prefix": "vec3",
    "body": [
      "Vec<Vec<Vec<${1:usize}>>>"
    ],
    "description": "3-dimentional vector"
  },
  "1-d vector": {
    "prefix": "vc",
    "body": [
      "let mut ${1:x} = vec![${2:0}; ${3:n}];"
    ],
    "description": "Declare 1-dimentional vector"
  },
  "2d vector": {
    "prefix": "vc2",
    "body": [
      "let mut ${1:x} = vec![vec![${2:1}; ${3:n}]; ${4:m}]"
    ],
    "description": "Declare 2-dimentional vector"
  },
  "3d vector": {
    "prefix": "vc3",
    "body": [
      "let mut ${1:x} = vec![vec![vec![${2:0}; ${3:n}]; ${4:m}]; ${5:k}]"
    ],
    "description": "Declare 3-dimentional vector"
  },
  "struct Solver": {
    "prefix": "stsolver",
    "body": [
      "use std::cell::RefCell;",
      "#[derive(Debug)]",
      "struct Solver {",
      "  edges: Vec<Vec<usize>>,",
      "  // dp: RefCell<Vec<Vec<usize>>>",
      "}",
      "impl Solver {",
      "  fn new(edges: Vec<Vec<usize>>) -> Self {",
      "    Solver { edges: edges }",
      "  }",
      "}"
    ],
    "description": "Solver structures template"
  },
  "new Scanner": {
    "prefix": "new_scanner",
    "body": [
      "let stdin = std::io::stdin();",
      "let mut sc = Scanner { reader: stdin.lock() };"
    ],
    "description": "Create a new scanner"
  }
}